#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int main()
{
   

    int n, finish, start;
    cin >>n >> finish >> start;
    

    std::vector<int> neighbors[ 101];
    for (int i = 1; i <= n; i++) {
        for ( int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            if (x == 1) {
                neighbors[i].push_back(j);
            }

        }
    }

    
    for (int i = 1; i <= n; i++) {
        //::cout << "neighbors of " << i << ": ";
        for (int j = 0; j < neighbors[i].size(); j++) {
           //std::cout neighbors[i][j] << " ";`
        }
       //td::cout << std::endl;
    }

    bool visited[ 101];
    int previous[ 101];
    int distanceFromStart[ 101];

    for (int i = 1; i <= n; i++) {
        visited[i] = false;
        previous[i] = 0;
        distanceFromStart[i] =  10000;
    }
    visited[start] = true;
    previous[start] = start;
    distanceFromStart[start] = 0;


    std::queue<int> q;
    q.push(start);
    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        for (int i = 0; i < neighbors[currentVertex].size(); i++) {
            int neighbor = neighbors[currentVertex][i];
            if (!visited[neighbor]) {
                previous[neighbor] = currentVertex;
                visited[neighbor] = true;
                distanceFromStart[neighbor] = distanceFromStart[currentVertex] + 1;
                
                q.push(neighbor);
                //std::cout << std::endl;
                //std::cout << neighbor << " is pushed to the queue" << std::endl;
                //::cout << "distance from " << start << " to " << neighbor << ": "
                   //< distanceFromStart[neighbor] << std::endl;
            }
        }
    }

    std::vector<int> routeFromStartToFinish;
    routeFromStartToFinish.push_back(finish);
    int previousVertex = finish;
    for (int i = 1; i <= distanceFromStart[finish]; i++) {
        previousVertex = previous[previousVertex];
        routeFromStartToFinish.push_back(previousVertex);
    }


    //d::cout << std::endl << "Route from " << start << " to " << finish << ": ";
    //for (int i = routeFromStartToFinish.size() - 1; i >= 0; i--)
       //std::cout << routeFromStartToFinish[i] << " ";
        
    
    
    if(distanceFromStart[finish]==10000){
        cout<<0<<endl;
    }
    else
    {cout<<distanceFromStart[finish]<<endl;}
    return 0;
}
